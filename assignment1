stack = []

# 1. UR pushes ["AssignmentX", "AssignmentY", "AssignmentZ"]. Undo one. Which is top?
stack = ["AssignmentX", "AssignmentY", "AssignmentZ"]
stack.pop()  # Undo one
print("Stack Q1 Top:", stack[-1])  # Output: AssignmentY

# 2. Irembo, push ["StepX", "StepY", "StepZ"]. Undo all. Which remains?
stack = ["StepX", "StepY", "StepZ"]
stack.pop()
stack.pop()
stack.pop()
print("Stack Q2 Remains:", stack)  # Output: []

# 3. Challenge: Push ["A", "B", "C"], pop all, push "D". Which is top?
stack = []
stack.extend(["A", "B", "C"])
stack.pop()
stack.pop()
stack.pop()
stack.append("D")
print("Stack Q3 Top:", stack[-1])  # Output: D

# 4. Reflection: Reversing input order with stack
inputs = ["first", "second", "third"]
stack = []
for item in inputs:
    stack.append(item)
reversed_inputs = []
while stack:
    reversed_inputs.append(stack.pop())
print("Stack Q4 Reversed:", reversed_inputs)  # Output: ['third', 'second', 'first']

# Queue examples (FIFO)
from collections import deque

# 1. CHUK, 10 patients queue. After 7 served, who is front?
queue = deque(range(1, 11))  # patients 1 to 10
for _ in range(7):
    queue.popleft()
print("Queue Q1 Front:", queue[0])  # Output: 8

# 2. Nyabugogo, 8 buses queue. Who departs first?
queue = deque(["Bus" + str(i) for i in range(1, 9)])  # Bus1 to Bus8
first_depart = queue.popleft()
print("Queue Q2 First Depart:", first_depart)  # Output: Bus1

# 3. Challenge: Queue vs stack for distributing voter cards
# Queue is correct (FIFO)
voter_queue = deque(["voter1", "voter2", "voter3"])
distributed_order = []
while voter_queue:
    distributed_order.append(voter_queue.popleft())
print("Queue Q3 Distributed Order:", distributed_order)  # Output: ['voter1', 'voter2', 'voter3']

# 4. Reflection: Why FIFO promotes trust in elections
# Demonstrate fairness
arrival_order = ["Alice", "Bob", "Carol"]
queue = deque(arrival_order)
served_order = []
while queue:
    served_order.append(queue.popleft())
print("Queue Q4 Served Order:", served_order)
# Output: ['Alice', 'Bob', 'Carol'] (same as arrival, showing fairness)